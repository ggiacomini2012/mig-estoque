# Explicação da Duplicação de Botões

O problema de duplicação dos botões está acontecendo devido a dois fatores principais:

## 1. Duplicação durante o salvamento/restauração:

Quando o HTML é salvo no localStorage pelo `auto-save.js`, ele salva toda a estrutura HTML, incluindo os botões que foram adicionados dinamicamente pelo `table-editor.js`. Quando essa estrutura é restaurada, os botões já estão presentes no HTML carregado.

Depois, quando o evento `tableRestored` é disparado, o `table-editor.js` executa a função `addTableControls()` novamente, adicionando um novo conjunto de botões, resultando na duplicação:

```html
<!-- Botões já existentes na estrutura HTML restaurada do localStorage -->
<div><button>+</button><button>-</button></div>

<!-- Botões adicionados pelo addTableControls após a restauração -->
<div class="subtable-controls"><button>+</button><button>-</button></div>
```

## 2. Limpeza incompleta:

No código atual, a função `addTableControls()` tenta remover controles antigos antes de adicionar novos:

```javascript
// Remover controles antigos para evitar duplicação
document.querySelectorAll('.subtable-controls').forEach(control => control.remove());
```

No entanto, isso só remove os elementos que têm a classe `subtable-controls`. Os botões originais salvos no localStorage podem não ter essa classe, especialmente se foram criados em uma versão anterior do código, resultando na falha da limpeza.

## Solução:

1. Adicionar um identificador consistente (classe) em todos os controles
2. Garantir que ao salvar o HTML, os controles sejam excluídos ou não salvos
3. Melhorar a lógica de limpeza para remover todos os possíveis controles:

```javascript
// Remover todos os controles que podem existir antes da subtable
document.querySelectorAll('.subtable').forEach(table => {
  let prev = table.previousElementSibling;
  while (prev && (prev.classList.contains('subtable-controls') || 
                  prev.querySelector('button'))) {
    const toRemove = prev;
    prev = prev.previousElementSibling;
    toRemove.remove();
  }
});
```

4. Outra abordagem seria salvar apenas os dados da tabela (não a estrutura HTML completa) e reconstruir a interface a partir desses dados toda vez. 


nao commite

escreva de forma extremamente minimalista e consisa

crie um arquivo js nao edite outros... 

este arquivo limpa botoes duplicados
